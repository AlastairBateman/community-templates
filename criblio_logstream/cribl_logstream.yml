apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: crazy-goodall-804001
spec:
    language: flux
    name: bucket
    query: |-
        buckets()
          |> filter(fn: (r) => r.name !~ /^_/)
          |> rename(columns: {name: "_value"})
          |> keep(columns: ["_value"])
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: burfect-greider-c04001
spec:
    charts:
      - height: 1
        kind: Markdown
        name: Name this Cell
        note: '# Cluster Metrics'
        width: 2
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 3
        kind: Single_Stat_Plus_Line
        name: Active Connections
        position: overlaid
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "cribl.logstream.total")
                  |> filter(fn: (r) => r["_field"] == "activeCxn")
                  |> group()
                  |> aggregateWindow(every: v.windowPeriod, fn: max)
                  |> yield(name: "max")
        width: 2
        xCol: _time
        yCol: _value
        yPos: 1
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#FD7A5D'
            name: Delorean
            type: scale
          - hex: '#5F1CF2'
            name: Delorean
            type: scale
          - hex: '#4CE09A'
            name: Delorean
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Sources (events)
        position: overlaid
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "cribl.logstream.total")
                  |> filter(fn: (r) => r["_field"] == "in_events")
                  |> filter(fn: (r) => exists r["ci"] and r["ci"] != "cribl:CriblMetrics")
                  |> group(columns: ["ci"])
                  |> aggregateWindow(every: v.windowPeriod, fn: sum)
                  |> yield(name: "sum")
        width: 12
        xCol: _time
        yCol: _value
        yPos: 4
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#DA6FF1'
            name: Ectoplasm
            type: scale
          - hex: '#00717A'
            name: Ectoplasm
            type: scale
          - hex: '#ACFF76'
            name: Ectoplasm
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Destinations (events)
        position: overlaid
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "cribl.logstream.total")
                  |> filter(fn: (r) => r["_field"] == "out_events")
                  |> filter(fn: (r) => exists r["co"])
                  |> group(columns: ["co"])
                  |> aggregateWindow(every: v.windowPeriod, fn: sum)
                  |> yield(name: "sum")
        width: 12
        xCol: _time
        yCol: _value
        yPos: 7
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Routes
        position: overlaid
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "cribl.logstream.pipe")
                  |> filter(fn: (r) => r["_field"] == "in_events" or r["_field"] == "out_events")
                  |> group(columns: ["id"])
                  |> aggregateWindow(every: v.windowPeriod, fn: sum)
                  |> yield(name: "sum")
        width: 12
        xCol: _time
        yCol: _value
        yPos: 10
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 2
        kind: Single_Stat_Plus_Line
        name: Open Connections
        position: overlaid
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "cribl.logstream.total")
                  |> filter(fn: (r) => r["_field"] == "openCxn")
                  |> aggregateWindow(every: 1m, fn: sum)
                  |> yield(name: "sum")
        width: 2
        xCol: _time
        xPos: 2
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 2
        kind: Single_Stat_Plus_Line
        name: Closed Connections
        position: overlaid
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "cribl.logstream.total")
                  |> filter(fn: (r) => r["_field"] == "closeCxn")
                  |> aggregateWindow(every: 1m, fn: sum)
                  |> yield(name: "sum")
        width: 2
        xPos: 2
        yPos: 2
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Events In/Out
        position: overlaid
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "cribl.logstream.total")
                  |> filter(fn: (r) => r["_field"] == "in_events" or r["_field"] == "out_events")
                  |> filter(fn: (r) => not exists r["ci"] and not exists r["co"])
                  |> aggregateWindow(every: v.windowPeriod, fn: sum)
                  |> yield(name: "sum")
        width: 4
        xCol: _time
        xPos: 4
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#74D495'
            name: Atlantis
            type: scale
          - hex: '#3F3FBA'
            name: Atlantis
            type: scale
          - hex: '#FF4D9E'
            name: Atlantis
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Bytes In/Out
        position: overlaid
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "cribl.logstream.total")
                  |> filter(fn: (r) => r["_field"] == "in_bytes" or r["_field"] == "out_bytes")
                  |> filter(fn: (r) => not exists r["ci"] and not exists r["co"])
                  |> aggregateWindow(every: v.windowPeriod, fn: sum)
                  |> yield(name: "sum")
        width: 4
        xCol: _time
        xPos: 8
        yCol: _value
    name: Cribl LogStream
