apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: bold-pike-308001
spec:
    color: '#326BBA'
    name: mongodb
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: serene-mccarthy-308005
spec:
    associations:
      - kind: Label
        name: bold-pike-308001
    name: mongodb
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: toasty-wing-708001
spec:
    associations:
      - kind: Label
        name: bold-pike-308001
    charts:
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 3
        kind: Single_Stat
        name: Uptime Mongo
        queries:
          - query: |-
                from(bucket: "mongodb")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "mongodb")
                  |> filter(fn: (r) => r["_field"] == "uptime_ns")
                  |> last()
                  |> map(fn: (r) => ({r with _value: r._value / 60000000000}))
        suffix: ' Minutes'
        width: 2
      - axes:
          - base: "10"
            name: y
            scale: linear
            suffix: ' Ops'
          - base: "10"
            name: x
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Query Operations
        position: overlaid
        queries:
          - query: |-
                from(bucket: "mongodb")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "mongodb")
                  |> filter(fn: (r) => r["_field"] == "commands" or r["_field"] == "deletes" or r["_field"] == "getmores" or r["_field"] == "inserts" or r["_field"] == "updates")
                  |> derivative(unit: v.windowPeriod, nonNegative: false)
                  |> yield(name: "derivative")
        width: 4
        xCol: _time
        yCol: _value
        yPos: 3
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
            suffix: ' bytes'
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Network I/O
        position: overlaid
        queries:
          - query: |-
                from(bucket: "mongodb")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "mongodb")
                  |> filter(fn: (r) => r["_field"] == "net_in_bytes" or r["_field"] == "net_out_bytes")
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
                  |> yield(name: "nonnegative derivative")
        width: 4
        xCol: _time
        yCol: _value
        yPos: 6
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#74D495'
            name: Atlantis
            type: scale
          - hex: '#3F3FBA'
            name: Atlantis
            type: scale
          - hex: '#FF4D9E'
            name: Atlantis
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Available Connections
        position: overlaid
        queries:
          - query: |-
                from(bucket: "mongodb")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "mongodb")
                  |> filter(fn: (r) => r["_field"] == "connections_available")
        width: 3
        xCol: _time
        xPos: 2
        yCol: _value
      - axes:
          - base: "10"
            name: y
            scale: linear
          - base: "10"
            name: x
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Document Operations
        position: overlaid
        queries:
          - query: |-
                from(bucket: "mongodb")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "mongodb")
                  |> filter(fn: (r) => r["_field"] == "document_deleted" or r["_field"] == "document_inserted" or r["_field"] == "document_returned" or r["_field"] == "document_updated")
                  |> derivative(unit: v.windowPeriod, nonNegative: false)
                  |> yield(name: "derivative")
        width: 4
        xCol: _time
        xPos: 4
        yCol: _value
        yPos: 3
      - axes:
          - base: "10"
            name: y
            scale: linear
          - base: "10"
            name: x
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Commands per Second
        position: overlaid
        queries:
          - query: |-
                from(bucket: "mongodb")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "mongodb")
                  |> filter(fn: (r) => r["_field"] == "commands_per_sec")
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
                  |> yield(name: "nonnegative derivative")
        width: 4
        xCol: _time
        xPos: 4
        yCol: _value
        yPos: 6
      - axes:
          - base: "10"
            name: y
            scale: linear
          - base: "10"
            name: x
            scale: linear
        colors:
          - hex: '#FDC44F'
            name: Cthulhu
            type: scale
          - hex: '#007C76'
            name: Cthulhu
            type: scale
          - hex: '#8983FF'
            name: Cthulhu
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Open Connections
        position: overlaid
        queries:
          - query: |-
                from(bucket: "mongodb")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "mongodb")
                  |> filter(fn: (r) => r["_field"] == "open_connections")
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
                  |> yield(name: "nonnegative derivative")
        width: 7
        xCol: _time
        xPos: 5
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Flushes
        position: overlaid
        queries:
          - query: |-
                from(bucket: "mongodb")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "mongodb")
                  |> filter(fn: (r) => r["_field"] == "flushes")
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
                  |> yield(name: "nonnegative derivative")
        width: 4
        xCol: _time
        xPos: 8
        yCol: _value
        yPos: 3
    name: MongoDB

---
apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: mongodb-config
spec:
    config: |
        [[outputs.influxdb_v2]]
          ## The URLs of the InfluxDB cluster nodes.
          ##
          ## Multiple URLs can be specified for a single cluster, only ONE of the
          ## urls will be written to each interval.
          ## urls exp: http://127.0.0.1:9999
          urls = ["$INFLUX_HOST"]

          ## Token for authentication.
          token = "$INFLUX_TOKEN"

          ## Organization is the name of the organization you wish to write to; must exist.
          organization = "$INFLUX_ORG"

          ## Destination bucket to write into.
          bucket = "$INFLUX_BUCKET"

        [[inputs.mongodb]]
          ## An array of URLs of the form:
          ##   "mongodb://" [user ":" pass "@"] host [ ":" port]
          ## For example:
          ##   mongodb://user:auth_key@10.10.3.30:27017,
          ##   mongodb://10.10.3.33:18832,

          servers = ["$MONGO_CONNECTION_STRING"]

          ## When true, collect per database stats
          # gather_perdb_stats = false

          ## When true, collect per collection stats
          # gather_col_stats = false

          ## List of db where collections stats are collected
          ## If empty, all db are concerned
          # col_stats_dbs = ["local"]

          ## Optional TLS Config
          # tls_ca = "/etc/telegraf/ca.pem"
          # tls_cert = "/etc/telegraf/cert.pem"
          # tls_key = "/etc/telegraf/key.pem"
          ## Use TLS but skip chain & host verification
          # insecure_skip_verify = false


