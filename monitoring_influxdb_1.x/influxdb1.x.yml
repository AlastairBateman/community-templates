apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: InfluxDB1.x
spec:
    color: '#311F94'
---
apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: Solution
spec:
    color: '#FFD255'
---
apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: Telegraf
spec:
    color: '#C9D0FF'
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: telegraf
spec:
    retentionRules:
      - everySeconds: 604800
        type: expire
---
apiVersion: influxdata.com/v2alpha1
kind: CheckDeadman
metadata:
    name: Host Deadman
spec:
    every: 1m0s
    level: CRIT
    query: |-
        from(bucket: "telegraf")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r._measurement == "influxdb_runtime")
          |> filter(fn: (r) => r._field == "Sys")
    staleTime: 10m0s
    status: active
    statusMessageTemplate: Host ${r.host} is ${r._level}
    timeSince: 1m30s
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: Disk Usage Check
spec:
    every: 1m0s
    query: |-
        from(bucket: "telegraf")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r._measurement == "disk")
          |> filter(fn: (r) => r._field == "used_percent")
          |> filter(fn: (r) => r.path == "/" or r.path == "/Volumes/Recovery" or r.path == "/private/var/vm")
          |> aggregateWindow(every: 1m, fn: max)
          |> yield(name: "max")
    status: active
    statusMessageTemplate: '${r._level}: Host: ${ r.host } Path: ${ r.path } Used:
        ${string(v: r.used_percent)}%'
    thresholds:
      - level: CRIT
        type: greater
        value: 70
      - level: WARN
        type: greater
        value: 50
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: Memory Usage Check
spec:
    every: 1m0s
    query: |-
        from(bucket: "telegraf")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r._measurement == "mem")
          |> filter(fn: (r) => r._field == "used_percent")
          |> aggregateWindow(every: 1m, fn: max)
          |> yield(name: "max")
    status: active
    statusMessageTemplate: '${r._level}: Host: ${r.host} Memory Used: ${string(v:r.used_percent)}%'
    thresholds:
      - level: CRIT
        type: greater
        value: 80
      - level: WARN
        type: greater
        value: 70
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: bucket
spec:
    language: flux
    query: |-
        buckets()
          |> filter(fn: (r) => r.name !~ /^_/)
          |> rename(columns: {name: "_value"})
          |> keep(columns: ["_value"])
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: influxdb_host
spec:
    language: flux
    query: |-
        import "influxdata/influxdb/v1"
        v1.measurementTagValues(bucket: v.bucket, measurement: "influxdb", tag: "host")
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: telegraf_host
spec:
    language: flux
    query: |-
        import "influxdata/influxdb/v1"
        v1.measurementTagValues(bucket: v.bucket, measurement: "internal_agent", tag: "host")
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Telegraf
metadata:
    name: InfluxDB_1.x.conf
spec:
    associations:
      - kind: Label
        name: Solution
      - kind: Label
        name: InfluxDB1.x
      - kind: Label
        name: Telegraf
    config: |
        # Global tags can be specified here in key="value" format.
        [global_tags]
          # dc = "us-east-1" # will tag all metrics with dc=us-east-1
          # rack = "1a"
          ## Environment variables can be used as tags, and throughout the config file
          # user = "$USER"

        # Configuration for telegraf agent
        [agent]
          ## Default data collection interval for all inputs
          interval = "10s"
          ## Rounds collection interval to 'interval'
          ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
          round_interval = true

          ## Telegraf will send metrics to outputs in batches of at most
          ## metric_batch_size metrics.
          ## This controls the size of writes that Telegraf sends to output plugins.
          metric_batch_size = 1000

          ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
          ## output, and will flush this buffer on a successful write. Oldest metrics
          ## are dropped first when this buffer fills.
          ## This buffer only fills when writes fail to output plugin(s).
          metric_buffer_limit = 10000

          ## Collection jitter is used to jitter the collection by a random amount.
          ## Each plugin will sleep for a random time within jitter before collecting.
          ## This can be used to avoid many plugins querying things like sysfs at the
          ## same time, which can have a measurable effect on the system.
          collection_jitter = "0s"

          ## Default flushing interval for all outputs. You shouldn't set this below
          ## interval. Maximum flush_interval will be flush_interval + flush_jitter
          flush_interval = "10s"
          ## Jitter the flush interval by a random amount. This is primarily to avoid
          ## large write spikes for users running a large number of telegraf instances.
          ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
          flush_jitter = "10s"

          ## By default or when set to "0s", precision will be set to the same
          ## timestamp order as the collection interval, with the maximum being 1s.
          ##   ie, when interval = "10s", precision will be "1s"
          ##       when interval = "250ms", precision will be "1ms"
          ## Precision will NOT be used for service inputs. It is up to each individual
          ## service input to set the timestamp at the appropriate precision.
          ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
          precision = "1s"

          ## Logging configuration:
          ## Run telegraf with debug log messages.
          debug = true
          ## Run telegraf in quiet mode (error log messages only).
          quiet = false
          ## Specify the log file name. The empty string means to log to stderr.
          logfile = ""

          ## Override default hostname, if empty use os.Hostname()
          hostname = ""
          ## If set to true, do no set the "host" tag in the telegraf agent.
          omit_hostname = false

        ###############################################################################
        #                            INPUT PLUGINS                                    #
        ###############################################################################

        # Read metrics about cpu usage
        [[inputs.cpu]]
          ## Whether to report per-cpu stats or not
          percpu = true
          ## Whether to report total system cpu stats or not
          totalcpu = true
          ## If true, collect raw CPU time metrics.
          collect_cpu_time = false
          ## If true, compute and report the sum of all non-idle CPU states.
          report_active = false

        # Read metrics about disk usage by mount point
        [[inputs.disk]]
          ## By default stats will be gathered for all mount points.
          ## Set mount_points will restrict the stats to only the specified mount points.
          # mount_points = ["/"]

          ## Ignore mount points by filesystem type.
          ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

        # Read metrics about disk IO by device
        [[inputs.diskio]]
          ## By default, telegraf will gather stats for all devices including
          ## disk partitions.
          ## Setting devices will restrict the stats to the specified devices.
          # devices = ["sda", "sdb", "vd*"]
          ## Uncomment the following line if you need disk serial numbers.
          # skip_serial_number = false
          #
          ## On systems which support it, device metadata can be added in the form of
          ## tags.
          ## Currently only Linux is supported via udev properties. You can view
          ## available properties for a device by running:
          ## 'udevadm info -q property -n /dev/sda'
          ## Note: Most, but not all, udev properties can be accessed this way. Properties
          ## that are currently inaccessible include DEVTYPE, DEVNAME, and DEVPATH.
          # device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
          #
          ## Using the same metadata source as device_tags, you can also customize the
          ## name of the device via templates.
          ## The 'name_templates' parameter is a list of templates to try and apply to
          ## the device. The template may contain variables in the form of '$PROPERTY' or
          ## '${PROPERTY}'. The first template which does not contain any variables not
          ## present for the device is used as the device name tag.
          ## The typical use case is for LVM volumes, to get the VG/LV name instead of
          ## the near-meaningless DM-0 name.
          # name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]

        # Collect statistics about itself
        [[inputs.internal]]
          ## If true, collect telegraf memory stats.
          collect_memstats = true

        # Read metrics about memory usage
        [[inputs.mem]]
          # no configuration

        # Read metrics about network interface usage
        [[inputs.net]]
          ## By default, telegraf gathers stats from any up interface (excluding loopback)
          ## Setting interfaces will tell it to gather these explicit interfaces,
          ## regardless of status.
          ##
          # interfaces = ["eth0"]
          ##
          ## On linux systems telegraf also collects protocol stats.
          ## Setting ignore_protocol_stats to true will skip reporting of protocol metrics.
          ##
          # ignore_protocol_stats = false

        # Read metrics about system load & uptime
        [[inputs.system]]
          ## Uncomment to remove deprecated metrics.
          fielddrop = ["uptime_format"]

        # Read InfluxDB-formatted JSON metrics from one or more HTTP endpoints
        [[inputs.influxdb]]
          alias = "influxdb"
          ## Works with InfluxDB debug endpoints out of the box,
          ## but other services can use this format too.
          ## See the influxdb plugin's README for more details.

          ## Multiple URLs from which to read InfluxDB-formatted JSON
          ## Default is "http://localhost:8086/debug/vars".
          urls = [
            "http://localhost:8086/debug/vars"
          ]

          ## Optional TLS Config
          # tls_ca = "/etc/telegraf/ca.pem"
          # tls_cert = "/etc/telegraf/cert.pem"
          # tls_key = "/etc/telegraf/key.pem"
          ## Use TLS but skip chain & host verification
          # insecure_skip_verify = false

          ## http request & header timeout
          timeout = "5s"


        ###############################################################################
        #                            OUTPUT PLUGINS                                   #
        ###############################################################################

        # Configuration for sending metrics to InfluxDB
        [[outputs.influxdb_v2]]
          alias = "influxdb_v2"
          ## The URLs of the InfluxDB cluster nodes.
          ##
          ## Multiple URLs can be specified for a single cluster, only ONE of the
          ## urls will be written to each interval.
          urls = ["$INFLUX_URL"]

          ## Token for authentication.
          token = "$INFLUX_TOKEN"

          ## Organization is the name of the organization you wish to write to; must exist.
          organization = "$INFLUX_ORG"

          ## Destination bucket to write into.
          bucket = "telegraf"

          ## The value of this tag will be used to determine the bucket.  If this
          ## tag is not set the 'bucket' option is used as the default.
          # bucket_tag = ""

          ## If true, the bucket tag will not be added to the metric.
          # exclude_bucket_tag = false

          ## Timeout for HTTP messages.
          # timeout = "5s"

          ## Additional HTTP headers
          # http_headers = {"X-Special-Header" = "Special-Value"}

          ## HTTP Proxy override, if unset values the standard proxy environment
          ## variables are consulted to determine which proxy, if any, should be used.
          # http_proxy = "http://corporate.proxy:3128"

          ## HTTP User-Agent
          # user_agent = "telegraf"

          ## Content-Encoding for write request body, can be set to "gzip" to
          ## compress body or "identity" to apply no encoding.
          # content_encoding = "gzip"

          ## Enable or disable uint support for writing uints influxdb 2.0.
          # influx_uint_support = false

          ## Optional TLS Config for use on HTTP connections.
          # tls_ca = "/etc/telegraf/ca.pem"
          # tls_cert = "/etc/telegraf/cert.pem"
          # tls_key = "/etc/telegraf/key.pem"
          ## Use TLS but skip chain & host verification
          # insecure_skip_verify = false
    description: A telegraf config for monitoring your InfluxDB 1.x instance.
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: InfluxDB 1.x
spec:
    associations:
      - kind: Label
        name: Solution
      - kind: Label
        name: InfluxDB1.x
    charts:
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 0
        height: 1
        kind: Single_Stat
        name: System Uptime
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `system` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/system)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "system")
                  |> filter(fn: (r) => r._field == "uptime")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> last()
                  |> map(fn: (r) => ({ r with _value: float(v:r._value)/86400.0 }))
        suffix: ' days'
        width: 2
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: nCPU
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `system` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/system)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "system")
                  |> filter(fn: (r) => r._field == "n_cpus")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> last()
        suffix: ' cpus'
        width: 2
        yPos: 1
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 2
        kind: Single_Stat
        name: '# Measurements'
        note: "  \nTo enable this graph, you will need to configure the Telegraf `influxdb`
            plugin. For more information, please visit the [Telegraf InfluxDB plugin
            documentation](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/influxdb)."
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_database")
                  |> filter(fn: (r) => r._field == "numMeasurements")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> last()
                  |> group()
                  |> sum(column: "_value")
        width: 2
        yPos: 2
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 2
        kind: Single_Stat
        name: '# Series'
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `influxdb` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/influxdb)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_database")
                  |> filter(fn: (r) => r._field == "numSeries")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> last()
                  |> group()
                  |> sum(column: "_value")
        width: 2
        yPos: 4
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: '# Measurements Per DB'
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `influxdb` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/influxdb)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_database")
                  |> filter(fn: (r) => r._field == "numMeasurements")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> aggregateWindow(every: v.windowPeriod, fn: last)
                  |> drop(columns: ["url"])
        shade: true
        width: 4
        xCol: _time
        yCol: _value
        yPos: 6
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#FD7A5D'
            name: Delorean
            type: scale
          - hex: '#5F1CF2'
            name: Delorean
            type: scale
          - hex: '#4CE09A'
            name: Delorean
            type: scale
          - hex: '#F95F53'
            name: curacao
            type: text
        decimalPlaces: 2
        height: 3
        kind: Single_Stat_Plus_Line
        name: InfluxDB active requests
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `influxdb` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/influxdb)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "system" or r._measurement == "influxdb_httpd")
                  |> filter(fn: (r) => r._field == "reqActive")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> drop(columns: ["url"])
        shade: true
        width: 4
        xCol: _time
        yCol: _value
        yPos: 9
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: InfluxDB - written points / min
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `influxdb` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/influxdb)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_write")
                  |> filter(fn: (r) => r._field == "pointReq")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
                  |> drop(columns: ["url"])
        shade: true
        width: 4
        xCol: _time
        yCol: _value
        yPos: 12
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: InfluxDB - Client Errors
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `influxdb` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/influxdb)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_httpd")
                  |> filter(fn: (r) => r._field == "clientError" or r._field == "authFail")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
                  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)
                  |> drop(columns: ["url"])
        shade: true
        width: 4
        xCol: _time
        yCol: _value
        yPos: 15
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: System Load
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `system` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/system)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "system")
                  |> filter(fn: (r) => r._field == "load1" or r._field == "load5" or r._field == "load15")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
        shade: true
        width: 3
        xCol: _time
        xPos: 2
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: CPU Utilization %
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `cpu` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/cpu)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "cpu")
                  |> filter(fn: (r) => r._field == "usage_system" or r._field == "usage_user" or r._field == "usage_iowait" or r._field == "usage_idle")
                  |> filter(fn: (r) => r.cpu == "cpu-total")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
        shade: true
        width: 6
        xCol: _time
        xPos: 2
        yCol: _value
        yPos: 3
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: '# Series Per DB'
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `influxdb` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/influxdb)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "system" or r._measurement == "influxdb_database")
                  |> filter(fn: (r) => r._field == "numSeries")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> aggregateWindow(every: v.windowPeriod, fn: last)
                  |> drop(columns: ["url"])
        shade: true
        width: 4
        xCol: _time
        xPos: 4
        yCol: _value
        yPos: 6
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: InfluxDB - HTTP Requests / Min
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `influxdb` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/influxdb)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_httpd")
                  |> filter(fn: (r) => r._field == "queryReq" or r._field == "writeReq")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> drop(columns: ["url"])
        shade: true
        width: 4
        xCol: _time
        xPos: 4
        yCol: _value
        yPos: 9
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: InfluxDB - Query Executor Duration
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `influxdb` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/influxdb)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "system" or r._measurement == "influxdb_queryExecutor")
                  |> filter(fn: (r) => r._field == "queryDurationNs")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
                  |> drop(columns: ["url"])
        shade: true
        width: 4
        xCol: _time
        xPos: 4
        yCol: _value
        yPos: 12
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: '#CQ / Minute'
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `influxdb` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/influxdb)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_cq")
                  |> filter(fn: (r) => r._field == "queryFail" or r._field == "queryOk")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> drop(columns: ["url"])
        shade: true
        width: 4
        xCol: _time
        xPos: 4
        yCol: _value
        yPos: 15
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Network
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `net` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/net)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "net")
                  |> filter(fn: (r) => r._field == "bytes_recv" or r._field == "bytes_sent")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
        shade: true
        width: 3
        xCol: _time
        xPos: 5
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#8F8AF4'
            name: Do Androids Dream of Electric Sheep?
            type: scale
          - hex: '#A51414'
            name: Do Androids Dream of Electric Sheep?
            type: scale
          - hex: '#F4CF31'
            name: Do Androids Dream of Electric Sheep?
            type: scale
          - hex: '#7A65F2'
            name: star
            type: text
        decimalPlaces: 0
        height: 3
        kind: Single_Stat_Plus_Line
        name: Memory Usage
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `mem` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/mem)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "mem")
                  |> filter(fn: (r) => r._field == "used_percent")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> aggregateWindow(every: v.windowPeriod, fn: max)
        suffix: '%'
        width: 4
        xCol: _time
        xPos: 8
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#DA6FF1'
            name: Ectoplasm
            type: scale
          - hex: '#00717A'
            name: Ectoplasm
            type: scale
          - hex: '#ACFF76'
            name: Ectoplasm
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: Filesystems usage
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `disk` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/disk)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "disk")
                  |> filter(fn: (r) => r._field == "used_percent")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> filter(fn: (r) => r.path == "/" or r.path == "/private/var/vm" or r.path == "/Volumes/Recovery")
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
        shade: true
        width: 4
        xCol: _time
        xPos: 8
        yCol: _value
        yPos: 3
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#FDC44F'
            name: Cthulhu
            type: scale
          - hex: '#007C76'
            name: Cthulhu
            type: scale
          - hex: '#8983FF'
            name: Cthulhu
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: InfluxDB Memory Heap
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `influxdb` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/influxdb)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_runtime")
                  |> filter(fn: (r) => r._field == "HeapAlloc" or r._field == "HeapInUse" or r._field == "HeapSys")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> drop(columns: ["url"])
        shade: true
        width: 4
        xCol: _time
        xPos: 8
        yCol: _value
        yPos: 6
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: InfluxDB GC activity
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `influxdb` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/influxdb)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_runtime")
                  |> filter(fn: (r) => r._field == "PauseTotalNs")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
                  |> drop(columns: ["url"])
        shade: true
        width: 4
        xCol: _time
        xPos: 8
        yCol: _value
        yPos: 9
      - axes:
          - base: "10"
            name: y
            scale: linear
          - base: "10"
            name: x
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: InfluxDB - Write Errors
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and InfluxDB host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `influxdb` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/influxdb)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "influxdb_write")
                  |> filter(fn: (r) => r._field == "writeError")
                  |> filter(fn: (r) => r.host == v.influxdb_host)
                  |> derivative(unit: v.windowPeriod, nonNegative: true)
                  |> drop(columns: ["url"])
        shade: true
        width: 4
        xCol: _time
        xPos: 8
        yCol: _value
        yPos: 12
    description: A dashboard for monitoring your InfluxDB 1.x instances.
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: Telegraf
spec:
    associations:
      - kind: Label
        name: Solution
      - kind: Label
        name: InfluxDB1.x
      - kind: Label
        name: Telegraf
    charts:
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#32B08C'
            name: viridian
            type: text
          - hex: '#F95F53'
            name: curacao
            type: text
            value: 50
        decimalPlaces: 2
        height: 3
        kind: Single_Stat_Plus_Line
        name: Gather Errors
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and Telegraf host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `internal` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/internal)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_agent")
                  |> filter(fn: (r) => r._field == "gather_errors")
                  |> filter(fn: (r) => r.host == v.telegraf_host)
        width: 4
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 3
        kind: Single_Stat_Plus_Line
        name: Metrics Dropped
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and Telegraf host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `internal` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/internal)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_agent")
                  |> filter(fn: (r) => r._field == "metrics_dropped")
                  |> filter(fn: (r) => r.host == v.telegraf_host)
        width: 4
        xCol: _time
        yCol: _value
        yPos: 3
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
            suffix: '%'
        colors:
          - hex: '#FDC44F'
            name: Cthulhu
            type: scale
          - hex: '#007C76'
            name: Cthulhu
            type: scale
          - hex: '#8983FF'
            name: Cthulhu
            type: scale
          - hex: '#FFB94A'
            name: pineapple
            type: text
        decimalPlaces: 1
        height: 3
        kind: Single_Stat_Plus_Line
        name: Memory
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and Telegraf host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `mem` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/mem)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "mem")
                  |> filter(fn: (r) => r._field == "used_percent")
                  |> filter(fn: (r) => r.host == v.telegraf_host)
                  |> aggregateWindow(every: v.windowPeriod, fn: last)
        shade: true
        suffix: '%'
        width: 4
        xCol: _time
        yCol: _value
        yPos: 6
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 3
        kind: Single_Stat_Plus_Line
        name: Metrics Gathered
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and Telegraf host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `internal` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/internal)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_agent")
                  |> filter(fn: (r) => r._field == "metrics_gathered")
                  |> filter(fn: (r) => r.host == v.telegraf_host)
        width: 4
        xCol: _time
        xPos: 4
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 3
        kind: Single_Stat_Plus_Line
        name: Metrics Written
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and Telegraf host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `internal` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/internal)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_agent")
                  |> filter(fn: (r) => r._field == "metrics_written")
                  |> filter(fn: (r) => r.host == v.telegraf_host)
        width: 4
        xPos: 4
        yPos: 3
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
            suffix: '%'
        colors:
          - hex: '#FD7A5D'
            name: Delorean
            type: scale
          - hex: '#5F1CF2'
            name: Delorean
            type: scale
          - hex: '#4CE09A'
            name: Delorean
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: CPU Utilization %
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and Telegraf host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `cpu` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/cpu)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "cpu")
                  |> filter(fn: (r) => r._field == "usage_system" or r._field == "usage_user" or r._field == "usage_iowait" or r._field == "usage_idle")
                  |> filter(fn: (r) => r.cpu == "cpu-total")
                  |> filter(fn: (r) => r.host == v.telegraf_host)
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty:false)
        shade: true
        width: 4
        xCol: _time
        xPos: 4
        yCol: _value
        yPos: 6
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 0
        height: 3
        kind: Single_Stat
        name: Avg Metrics Gathered Per Second
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and Telegraf host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `internal` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/internal)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_agent")
                  |> filter(fn: (r) => r._field == "metrics_gathered")
                  |> filter(fn: (r) => r.host == v.telegraf_host)
                  |> aggregateWindow(every: 1m, fn: last)
                  |> difference(nonNegative: true, columns: ["_value"])
                  |> mean()
                  |> map(fn: (r) => ({ r with _value: r._value / 60.0 }))
        width: 4
        xPos: 8
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 0
        height: 3
        kind: Single_Stat
        name: Avg Metrics Written Per Second
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and Telegraf host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `internal` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/internal)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "internal_agent")
                  |> filter(fn: (r) => r._field == "metrics_written")
                  |> filter(fn: (r) => r.host == v.telegraf_host)
                  |> aggregateWindow(every: 1m, fn: last)
                  |> difference(nonNegative: true, columns: ["_value"])
                  |> mean()
                  |> map(fn: (r) => ({ r with _value: r._value / 60.0 }))
        width: 4
        xPos: 8
        yPos: 3
      - axes:
          - base: "10"
            name: y
            scale: linear
          - base: "10"
            name: x
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 3
        kind: Xy
        name: System Load
        note: |-
            ---

            ##### No Results?
            Be sure to select the correct bucket and Telegraf host using the variables at the top of the dashboard.

            _This cell requires data collected by the [Telegraf `system` input plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/system)._
        noteOnEmpty: true
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "system")
                  |> filter(fn: (r) => r._field == "load1" or r._field == "load5" or r._field == "load15")
                  |> filter(fn: (r) => r.host == v.telegraf_host)
                  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
        shade: true
        width: 4
        xCol: _time
        xPos: 8
        yCol: _value
        yPos: 6
    description: A dashboard for monitoring your Telegraf agents.
