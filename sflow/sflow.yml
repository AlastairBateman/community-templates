apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: eerie-newton-325000
spec:
    color: '#326BBA'
    name: sFlow
---
apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: tasty-lamarr-325001
spec:
    color: '#326BBA'
    name: Network Monitoring
---
apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: stubborn-hawking-f25000
spec:
    color: '#326BBA'
    name: inputs.sflow
---
apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: earnest-meninsky-c26001
spec:
    color: '#108174'
    name: outputs.influxdb_v2
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: compassionate-lalande-725001
spec:
    associations:
      - kind: Label
        name: eerie-newton-325000
      - kind: Label
        name: tasty-lamarr-325001
    name: sflow_data
    retentionRules:
      - everySeconds: 259200
        type: expire
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: busy-greider-b25001
spec:
    associations:
      - kind: Label
        name: eerie-newton-325000
      - kind: Label
        name: tasty-lamarr-325001
    language: flux
    name: sflow_dest
    query: |-
        import "influxdata/influxdb/v1"

        v1.tagValues(bucket: "sflow_data", tag: "dst_ip", predicate: (r) => r._measurement == "sflow")// and r.host == v.agent_host)
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: intelligent-chaum-725002
spec:
    associations:
      - kind: Label
        name: eerie-newton-325000
      - kind: Label
        name: tasty-lamarr-325001
    language: flux
    name: agent_host
    query: |-
        import "influxdata/influxdb/v1"

        v1.tagValues(bucket: "sflow_data", tag: "host", predicate: (r) => r._measurement == "sflow")
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: modest-elion-725006
spec:
    associations:
      - kind: Label
        name: eerie-newton-325000
      - kind: Label
        name: tasty-lamarr-325001
    language: flux
    name: egress_interface
    query: |-
        import "influxdata/influxdb/v1"

        v1.tagValues(bucket: "sflow_data", tag: "output_ifindex", predicate: (r) => r._measurement == "sflow" and r.host == v.agent_host)
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: nervous-curie-325001
spec:
    associations:
      - kind: Label
        name: eerie-newton-325000
      - kind: Label
        name: tasty-lamarr-325001
    language: flux
    name: sflow_source
    query: |-
        import "influxdata/influxdb/v1"

        v1.tagValues(bucket: "sflow_data", tag: "src_ip", predicate: (r) => r._measurement == "sflow" and r.host == v.agent_host)
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: romantic-perlman-325005
spec:
    associations:
      - kind: Label
        name: eerie-newton-325000
      - kind: Label
        name: tasty-lamarr-325001
    language: flux
    name: ingress_interface
    query: |-
        import "influxdata/influxdb/v1"

        v1.tagValues(bucket: "sflow_data", tag: "input_ifindex", predicate: (r) => r._measurement == "sflow" and r.host == v.agent_host)
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: xenodochial-lumiere-f25003
spec:
    associations:
      - kind: Label
        name: eerie-newton-325000
      - kind: Label
        name: tasty-lamarr-325001
    name: sflow_metric
    type: constant
    values:
      - bytes
      - sampling_rate
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: affectionate-panini-b25001
spec:
    associations:
      - kind: Label
        name: eerie-newton-325000
      - kind: Label
        name: tasty-lamarr-325001
    charts:
      - colors:
          - hex: '#ffffff'
            name: white
            type: text
        fieldOptions:
          - displayName: src_ip
            fieldName: src_ip
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: agent_address
            fieldName: agent_address
            visible: true
          - displayName: dst_ip
            fieldName: dst_ip
            visible: true
          - displayName: dst_mac
            fieldName: dst_mac
            visible: true
          - displayName: dst_port
            fieldName: dst_port
            visible: true
          - displayName: ether_type
            fieldName: ether_type
            visible: true
          - displayName: header_protocol
            fieldName: header_protocol
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: input_ifindex
            fieldName: input_ifindex
            visible: true
          - displayName: ip_dscp
            fieldName: ip_dscp
            visible: true
          - displayName: ip_ecn
            fieldName: ip_ecn
            visible: true
          - displayName: output_ifindex
            fieldName: output_ifindex
            visible: true
          - displayName: source_id_index
            fieldName: source_id_index
            visible: true
          - displayName: source_id_type
            fieldName: source_id_type
            visible: true
          - displayName: src_mac
            fieldName: src_mac
            visible: true
          - displayName: src_port
            fieldName: src_port
            visible: true
          - displayName: bytes
            fieldName: bytes
            visible: true
          - displayName: sampling_rate
            fieldName: sampling_rate
            visible: true
          - displayName: packets
            fieldName: packets
            visible: true
          - displayName: records
            fieldName: records
            visible: true
        height: 8
        kind: Table
        name: Top Sources
        queries:
          - query: |
                import "influxdata/influxdb/v1"

                data = from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn:(r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r._field== "bytes" or r._field == "sampling_rate")
                  |> filter(fn: (r)=> r.host == v.agent_host)
                  |> keep(columns:["_time","_value","_field","src_ip"])
                
                bytes = data |> filter(fn: (r) => r._field == "bytes") |> sum() |> set(key: "_field", value: "bytes")
                packets = data |> filter(fn:(r) => r._field == "sampling_rate") |> sum() |> set(key: "_field",value: "packets")
                records = data |> filter(fn: (r) => r._field== "bytes") |> count() |> set(key: "_field", value: "records") 

                union(tables: [bytes, packets, records])
                  |> group()
                  |> pivot(rowKey:["src_ip"], columnKey: ["_field"], valueColumn: "_value")

        tableOptions:
            sortBy: bytes
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 6
      - colors:
          - hex: '#ffffff'
            name: white
            type: text
        fieldOptions:
          - displayName: src_ip
            fieldName: src_ip
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: agent_address
            fieldName: agent_address
            visible: true
          - displayName: dst_ip
            fieldName: dst_ip
            visible: true
          - displayName: dst_mac
            fieldName: dst_mac
            visible: true
          - displayName: dst_port
            fieldName: dst_port
            visible: true
          - displayName: ether_type
            fieldName: ether_type
            visible: true
          - displayName: header_protocol
            fieldName: header_protocol
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: input_ifindex
            fieldName: input_ifindex
            visible: true
          - displayName: ip_dscp
            fieldName: ip_dscp
            visible: true
          - displayName: ip_ecn
            fieldName: ip_ecn
            visible: true
          - displayName: output_ifindex
            fieldName: output_ifindex
            visible: true
          - displayName: source_id_index
            fieldName: source_id_index
            visible: true
          - displayName: source_id_type
            fieldName: source_id_type
            visible: true
          - displayName: src_mac
            fieldName: src_mac
            visible: true
          - displayName: src_port
            fieldName: src_port
            visible: true
          - displayName: bytes
            fieldName: bytes
            visible: true
          - displayName: sampling_rate
            fieldName: sampling_rate
            visible: true
          - displayName: packets
            fieldName: packets
            visible: true
          - displayName: records
            fieldName: records
            visible: true
        height: 8
        kind: Table
        name: Top Sources
        queries:
          - query: |
                import "influxdata/influxdb/v1"

                data = from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn:(r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r.host== v.agent_host)
                  |> filter(fn: (r) => r._field == "bytes" orr._field == "sampling_rate")
                  |> keep(columns:["_time","_value","_field","dst_ip"])
                
                bytes = data |> filter(fn: (r) => r._field == "bytes") |> sum() |> set(key: "_field", value: "bytes")
                packets = data |> filter(fn:(r) => r._field == "sampling_rate") |> sum() |> set(key: "_field",value: "packets")
                records = data |> filter(fn: (r) => r._field== "bytes") |> count() |> set(key: "_field", value: "records") 

                union(tables: [bytes, packets, records])
                  |> group()
                  |> pivot(rowKey:["dst_ip"], columnKey: ["_field"], valueColumn: "_value")
        tableOptions:
            sortBy: bytes
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 6
        xPos: 6
    description: Tracks the top source and destination IPs sending data.
    name: sFlow - Top Talkers
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: ecstatic-grothendieck-725001
spec:
    associations:
      - kind: Label
        name: eerie-newton-325000
      - kind: Label
        name: tasty-lamarr-325001
    charts:
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Source Traffic by Host - All Sources
        position: overlaid
        queries:
          - query: |-
                from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r._field == v.sflow_metric)
                  |> filter(fn: (r) => r.host == v.agent_host)
                  |> keep(columns: ["_time", "_value","_field","src_ip","host"])
                  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: true)
        width: 6
        xCol: _time
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Source Traffic by Host - Source --> All Destinations
        position: overlaid
        queries:
          - query: |-
                from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r._field == v.sflow_metric)
                  |> filter(fn: (r) => r.src_ip == v.sflow_source)
                  |> filter(fn: (r) => r.host == v.agent_host)
                  |> keep(columns: ["_time", "_value","_field","src_ip","dst_ip","host"])
                  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: true)
        width: 6
        xCol: _time
        yCol: _value
        yPos: 4
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Total Traffic by Host - Source <--> Destination
        position: overlaid
        queries:
          - query: |-
                from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r._field == v.sflow_metric)
                  |> filter(fn: (r) => r.src_ip == v.sflow_source)
                  |> filter(fn: (r) => r.dst_ip == v.sflow_dest)
                  |> filter(fn: (r) => r.host == v.agent_host)
                  |> keep(columns: ["_time", "_value","_field","input_ifindex","output_ifindex","src_ip","dst_ip"])
                  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: true)
        width: 12
        yPos: 8
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Destination Traffic by Host - All Destinations
        position: overlaid
        queries:
          - query: |-
                from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r._field == v.sflow_metric)
                  |> filter(fn: (r) => r.host == v.agent_host)
                  |> keep(columns: ["_time", "_value","_field","dst_ip","host"])
                  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: true)
        width: 6
        xCol: _time
        xPos: 6
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Destination Traffic by Host - All Sources --> Destination
        position: overlaid
        queries:
          - query: |-
                from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r._field == v.sflow_metric)
                  |> filter(fn: (r) => r.dst_ip == v.sflow_dest)
                  |> filter(fn: (r) => r.host == v.agent_host)
                  |> keep(columns: ["_time", "_value","_field","src_ip","dst_ip","host"])
                  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: true)
        width: 6
        xPos: 6
        yPos: 4
    description: Tracks usage by inbound or outbound IPs.
    name: sFlow - Source/Destination Traffic
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: rightful-fermat-f25001
spec:
    associations:
      - kind: Label
        name: eerie-newton-325000
    charts:
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Ingress Traffic by Host - All Interfaces
        position: overlaid
        queries:
          - query: |-
                from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r._field == v.sflow_metric)
                  |> filter(fn: (r) => r.host == v.agent_host)
                  |> keep(columns: ["_time", "_value","_field","input_ifindex","host"])
                  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: true)
        width: 6
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Ingress Traffic by Host - Ingress --> All Egress
        position: overlaid
        queries:
          - query: |-
                from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r._field == v.sflow_metric)
                  |> filter(fn: (r) => r.input_ifindex == v.ingress_interface)
                  |> filter(fn: (r) => r.host == v.agent_host)
                  |> keep(columns: ["_time", "_value","_field","input_ifindex","output_ifindex","host"])
                  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: true)
        width: 6
        xCol: _time
        yCol: _value
        yPos: 4
      - axes:
          - base: "10"
            name: y
            scale: linear
          - base: "10"
            name: x
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Total Traffic by Host - Ingress <--> Egress
        position: overlaid
        queries:
          - query: |-
                from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r._field == v.sflow_metric)
                  |> filter(fn: (r) => r.input_ifindex == v.ingress_interface)
                  |> filter(fn: (r) => r.output_ifindex == v.egress_interface)
                  |> filter(fn: (r) => r.host == v.agent_host)
                  |> keep(columns: ["_time", "_value","_field","input_ifindex","output_ifindex","src_ip","dst_ip"])
                  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: true)
        width: 12
        yPos: 8
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Egress Traffic by Host - All Interfaces
        position: overlaid
        queries:
          - query: |-
                from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r._field == v.sflow_metric)
                  |> filter(fn: (r) => r.host == v.agent_host)
                  |> keep(columns: ["_time", "_value","_field","output_ifindex","host"])
                  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: true)
        width: 6
        xPos: 6
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Egress Traffic by Host - All Ingress --> Egress Interface
        position: overlaid
        queries:
          - query: |-
                from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r._field == v.sflow_metric)
                  |> filter(fn: (r) => r.output_ifindex == v.egress_interface)
                  |> filter(fn: (r) => r.host == v.agent_host)
                  |> keep(columns: ["_time", "_value","_field","input_ifindex","output_ifindex","host"])
                  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: true)
        width: 6
        xPos: 6
        yPos: 4
    description: Tracks usage by inbound or outbound interfaces.
    name: sFlow - Ingress/Egress Traffic
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: spectacular-joliot-b25001
spec:
    associations:
      - kind: Label
        name: eerie-newton-325000
      - kind: Label
        name: tasty-lamarr-325001
    charts:
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            label: bandwidth (bits/s)
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Bandwidth by Source
        position: overlaid
        queries:
          - query: |-
                from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r._field == "bytes")
                  |> filter(fn: (r) => r.host == v.agent_host)
                  |> keep(columns: ["_time","_value", "_field","src_ip"])
                  |> sort(columns: ["_time"], desc: false)
                  |> group(columns: ["_time", "_value"], mode:"except")
                  |> derivative(unit: 1s, nonNegative: true, columns: ["_value"], timeColumn: "_time")
                  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty:true)
                  |> map(fn: (r) => ({ r with _value: r._value * 8.0 }))
                  |> set(key: "_field", value: "bandwidth")
        width: 6
        xCol: _time
        yCol: _value
      - axes:
          - base: "10"
            label: bandwidth (bits/s)
            name: y
            scale: linear
          - base: "10"
            name: x
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Bandwidth by Source Port
        position: overlaid
        queries:
          - query: |-
                from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r._field == "bytes")
                  |> filter(fn: (r) => r.host == v.agent_host)
                  |> keep(columns: ["_time","_value", "_field","src_port"])
                  |> sort(columns: ["_time"], desc: false)
                  |> group(columns: ["_time", "_value"], mode:"except")
                  |> derivative(unit: 1s, nonNegative: true, columns: ["_value"], timeColumn: "_time")
                  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty:true)
                  |> map(fn: (r) => ({ r with _value: r._value * 8.0 }))
                  |> set(key: "_field", value: "bandwidth")
        width: 6
        xCol: _time
        yCol: _value
        yPos: 4
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            label: bandwidth (bits/s)
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Bandwidth by Destination
        position: overlaid
        queries:
          - query: |-
                from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r._field == "bytes")
                  |> filter(fn: (r) => r.host == v.agent_host)
                  |> keep(columns: ["_time","_value", "_field","dst_ip"])
                  |> sort(columns: ["_time"], desc: false)
                  |> group(columns: ["_time", "_value"], mode:"except")
                  |> derivative(unit: 1s, nonNegative: true, columns: ["_value"], timeColumn: "_time")
                  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty:true)
                  |> map(fn: (r) => ({ r with _value: r._value * 8.0 }))
                  |> set(key: "_field", value: "bandwidth")
        width: 6
        xCol: _time
        xPos: 6
        yCol: _value
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            label: bandwidth (bits/s)
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 4
        kind: Xy
        name: Bandwidth by Destination Port
        position: overlaid
        queries:
          - query: |-
                from(bucket: "telegraf")
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r._measurement == "sflow")
                  |> filter(fn: (r) => r._field == "bytes")
                  |> filter(fn: (r) => r.host == v.agent_host)
                  |> keep(columns: ["_time","_value", "_field","dst_port"])
                  |> sort(columns: ["_time"], desc: false)
                  |> group(columns: ["_time", "_value"], mode:"except")
                  |> derivative(unit: 1s, nonNegative: true, columns: ["_value"], timeColumn: "_time")
                  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty:true)
                  |> map(fn: (r) => ({ r with _value: r._value * 8.0 }))
                  |> set(key: "_field", value: "bandwidth")
        width: 6
        xCol: _time
        xPos: 6
        yCol: _value
        yPos: 4
    description: Tracks bandwidth usage by source and destination IPs.
    name: sFlow - Bandwidth Usage
---
apiVersion: influxdata.com/v2alpha1
kind: Telegraf
metadata:
    name: lucid-gauss-022001
spec:
    associations:
      - kind: Label
        name: eerie-newton-325000
      - kind: Label
        name: tasty-lamarr-325001
      - kind: Label
        name: stubborn-hawking-f25000
      - kind: Label
        name: earnest-meninsky-c26001
    config: |
        # Telegraf Configuration
        #
        # Telegraf is entirely plugin driven. All metrics are gathered from the
        # declared inputs, and sent to the declared outputs.
        #
        # Plugins must be declared in here to be active.
        # To deactivate a plugin, comment out the name and any variables.
        #
        # Use 'telegraf -config telegraf.conf -test' to see what metrics a config
        # file would generate.
        #
        # Environment variables can be used anywhere in this config file, simply surround
        # them with ${}. For strings the variable must be within quotes (ie, "${STR_VAR}"),
        # for numbers and booleans they should be plain (ie, ${INT_VAR}, ${BOOL_VAR})

        # Global tags can be specified here in key="value" format.
        [global_tags]
          # dc = "us-east-1" # will tag all metrics with dc=us-east-1
          # rack = "1a"
          ## Environment variables can be used as tags, and throughout the config file
          # user = "$USER"

        # Configuration for telegraf agent
        [agent]
          ## Default data collection interval for all inputs
          interval = "10s"
          ## Rounds collection interval to 'interval'
          ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
          round_interval = true

          ## Telegraf will send metrics to outputs in batches of at most
          ## metric_batch_size metrics.
          ## This controls the size of writes that Telegraf sends to output plugins.
          metric_batch_size = 1000

          ## Maximum number of unwritten metrics per output.  Increasing this value
          ## allows for longer periods of output downtime without dropping metrics at the
          ## cost of higher maximum memory usage.
          metric_buffer_limit = 10000

          ## Collection jitter is used to jitter the collection by a random amount.
          ## Each plugin will sleep for a random time within jitter before collecting.
          ## This can be used to avoid many plugins querying things like sysfs at the
          ## same time, which can have a measurable effect on the system.
          collection_jitter = "0s"

          ## Default flushing interval for all outputs. Maximum flush_interval will be
          ## flush_interval + flush_jitter
          flush_interval = "10s"
          ## Jitter the flush interval by a random amount. This is primarily to avoid
          ## large write spikes for users running a large number of telegraf instances.
          ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
          flush_jitter = "0s"

          ## By default or when set to "0s", precision will be set to the same
          ## timestamp order as the collection interval, with the maximum being 1s.
          ##   ie, when interval = "10s", precision will be "1s"
          ##       when interval = "250ms", precision will be "1ms"
          ## Precision will NOT be used for service inputs. It is up to each individual
          ## service input to set the timestamp at the appropriate precision.
          ## Valid time units are "ns", "us" (or "µs"), "ms", "s".
          precision = ""

          ## Log at debug level.
          # debug = false
          ## Log only error level messages.
          # quiet = false

          ## Log target controls the destination for logs and can be one of "file",
          ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
          ## is determined by the "logfile" setting.
          # logtarget = "file"

          ## Name of the file to be logged to when using the "file" logtarget.  If set to
          ## the empty string then logs are written to stderr.
          # logfile = ""

          ## The logfile will be rotated after the time interval specified.  When set
          ## to 0 no time based rotation is performed.  Logs are rotated only when
          ## written to, if there is no log activity rotation may be delayed.
          # logfile_rotation_interval = "0d"

          ## The logfile will be rotated when it becomes larger than the specified
          ## size.  When set to 0 no size based rotation is performed.
          # logfile_rotation_max_size = "0MB"

          ## Maximum number of rotated archives to keep, any older logs are deleted.
          ## If set to -1, no archives are removed.
          # logfile_rotation_max_archives = 5

          ## Override default hostname, if empty use os.Hostname()
          hostname = ""
          ## If set to true, do no set the "host" tag in the telegraf agent.
          omit_hostname = false


        ###############################################################################
        #                            OUTPUT PLUGINS                                   #
        ###############################################################################

        # Configuration for sending metrics to InfluxDB
        [[outputs.influxdb_v2]]
          ## The URLs of the InfluxDB cluster nodes.
          ##
          ## Multiple URLs can be specified for a single cluster, only ONE of the
          ## urls will be written to each interval.
          ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
          urls = ["$INFLUX_HOST"]
          ## Token for authentication.
          token = "$INFLUX_TOKEN"
          ## Organization is the name of the organization you wish to write to; must exist.
          organization = "$INFLUX_ORG" ## Destination bucket to write into.
          bucket = "docker"
          ## The value of this tag will be used to determine the bucket.  If this
          ## tag is not set the 'bucket' option is used as the default.
          # bucket_tag = ""
                  ## If true, the bucket tag will not be added to the metric.
          # exclude_bucket_tag = false
                  ## Timeout for HTTP messages.
          # timeout = "5s"
                  ## Additional HTTP headers
          # http_headers = {"X-Special-Header" = "Special-Value"}
                  ## HTTP Proxy override, if unset values the standard proxy environment
          ## variables are consulted to determine which proxy, if any, should be used.
          # http_proxy = "http://corporate.proxy:3128"
                  ## HTTP User-Agent
          # user_agent = "telegraf"
                  ## Content-Encoding for write request body, can be set to "gzip" to
          ## compress body or "identity" to apply no encoding.
          # content_encoding = "gzip"
                  ## Enable or disable uint support for writing uints influxdb 2.0.
          # influx_uint_support = false
                  ## Optional TLS Config for use on HTTP connections.
          # tls_ca = "/etc/telegraf/ca.pem"
          # tls_cert = "/etc/telegraf/cert.pem"
          # tls_key = "/etc/telegraf/key.pem"
          ## Use TLS but skip chain & host verification
          # insecure_skip_verify = false

        ###############################################################################
        #                            INPUT PLUGINS                                    #
        ###############################################################################

        [[inputs.sflow]]
          ## Address to listen for sFlow packets.
          ##   example: service_address = "udp://:6343"
          ##            service_address = "udp4://:6343"
          ##            service_address = "udp6://:6343"
          service_address = "udp://:6343"

          ## Set the size of the operating system's receive buffer.
          ##   example: read_buffer_size = "64KiB"
          # read_buffer_size = ""
    description: A Telegraf config for monitoring your sFlow data.
    name: sFlow Monitoring
